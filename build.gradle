version = "0.6.2"

buildscript {
    ext {
        ghPages_version = version
        kotlin_version = '1.2.50'
        pom_explorer_version = '1.3.21'
        moshi_version = '1.5.0'
        okhttp_version = '3.10.0'
        kotlin_html_version = '0.6.10'
        kbox_version = '0.9.0'

        atrium_version = '0.7.0'
        mockito_kotlin_version = '1.5.0'
        mockito_version = '2.18.3'
        dokka_version = '0.9.17'
        dokka_sourceMapping = 'tree/v0.6.2'

        spek_version = '1.1.5'
        tutteli_spek_extensions = '0.2.0'

        //publish.gradle
        bintray_version = '1.7.3'
        publish_pkg_name = rootProject.name
        github_url = "https://github.com/loewenfels/${rootProject.name}"
        publish_vcsUrl = "${github_url}.git"

        //gh-pages.gradle
        docProjects = subprojects

        srcKotlin = 'src/main/kotlin'
        //jacoco-multi-project.gradle
        jacoco_tool_version = '0.8.1'
        projectsWithoutSources = [] //currently all have sources

        apiProjects = subprojects.findAll { it.name.contains('api') }
        apiJvmProjects = ext.apiProjects.findAll { it.name.endsWith('-jvm') }
        apiJsProjects = ext.apiProjects.findAll { it.name.endsWith('-js') }
        apiCommonProjects = ext.apiProjects - ext.apiJvmProjects - ext.apiJsProjects

        jvmProjects = subprojects - project("${rootProject.name}-gui") - ext.apiJsProjects - ext.apiCommonProjects
        jacocoMulti = [
            sourceProjects: jvmProjects - project(':atrium') + apiJvmProjects,
            jacocoProjects: jvmProjects.findAll {
                it.name != "${rootProject.name}-maven-api" &&
                    it.name != "atrium"
            } - projectsWithoutSources + apiJvmProjects
        ]
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "ch.tutteli:tutteli-gradle-project-utils:${gradle.ext.tutteli_plugins_version}"
        classpath "ch.tutteli:tutteli-gradle-spek:${gradle.ext.tutteli_plugins_version}"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

apply plugin: 'ch.tutteli.project.utils'

repositories {
    mavenCentral()
}

subprojects {
    it.version = rootProject.version

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://dl.bintray.com/robstoll/copies" }
        maven { url "https://dl.bintray.com/robstoll/tutteli-jars" }
    }
}

configure(apiCommonProjects) {
    apply plugin: 'kotlin-platform-common'
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
    }
}

static def getApiProject(String name, String suffix) {
    return ":" + name.substring(0, name.indexOf(suffix)) + "-common"
}
configure(apiJsProjects) { subproject ->
    apply plugin: 'kotlin-platform-js'

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
        expectedBy project(getApiProject(subproject.name, '-js'))
    }
}
configure(apiJvmProjects) { subproject ->
    apply plugin: 'kotlin-platform-jvm'

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        expectedBy project(getApiProject(subproject.name, '-jvm'))
    }
}

configure(jvmProjects - apiProjects) {
    apply plugin: 'ch.tutteli.kotlin'

    dependencies {
        compile kotlinStdLib()
        compile kotlinReflect()
    }
}

def jvmPublishedProjects = jvmProjects - project(':atrium')
def publishedProjects = subprojects - project(':atrium')
configure(publishedProjects) {
    it.ext.publish_components = []
    it.ext.publish_artifacts = []
}
configure(jvmPublishedProjects) {
    it.ext.publish_components = [components.java]
}
configure(publishedProjects - jvmPublishedProjects) {
    afterEvaluate {
        it.ext.publish_artifacts += [jar]
    }
}

def projectsWithSources = jvmPublishedProjects - projectsWithoutSources
configure(projectsWithSources) {
    apply plugin: 'org.jetbrains.dokka'

    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/kdoc"
        linkMapping {
            dir = rootProject.projectDir.absolutePath
            url = "$github_url/${dokka_sourceMapping}/"
            suffix = '#L'
        }

        sourceDirs = files(srcKotlin)
    }

    task sourceJar(type: Jar) {
        from project.sourceSets.main.allSource
        classifier 'sources'
    }

    task javadocJar(type: Jar, dependsOn: dokka) {
        from dokka.outputDirectory
        classifier = 'javadoc'
    }

    it.ext.publish_artifacts += [sourceJar, javadocJar]
}

// has to be after the above blocks which define `it.ext.publish_artifacts`
configure(publishedProjects) { subproject ->
    subproject.ext {
        publish_artifactId = subproject.name
    }
    afterEvaluate {
        apply from: "${rootProject.projectDir}/gradle/scripts/publish.gradle", to: subproject

        def includeBuildTime = task('includeBuildTime') {
            doLast {
                project.tasks.withType(Jar) { jarTask ->
                    jarTask.manifest {
                        attributes('Build-Time': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ'))
                    }
                }
            }
        }

        task publishBintray {
            dependsOn includeBuildTime
            dependsOn bintrayUpload
            bintrayUpload.mustRunAfter(includeBuildTime)
        }
    }
}

configure(jacocoMulti.jacocoProjects) {
    apply plugin: 'ch.tutteli.spek'

    dependencies {
        testCompile project(':atrium')
    }
}


apply from: 'gradle/scripts/jacoco-multi-project.gradle'
apply from: 'gradle/scripts/gh-pages.gradle'

/*

Release & deploy
-----------------
1. search for X.Y.Z-SNAPSHOT and change to X.Y.Z
2. update master:
    a) point to the tag
        1) search for `branch=master` and replace it with `tag=vX.Y.Z` (build status and coverage in README.md)
        2) search for `tree/master` and replace it with `tree/vX.Y.Z` (README.md)
    b) commit & push modified build.gradle, README.md, index.html, jenkins.pom with message `vX.Y.Z`
    c) git tag vX.Y.Z
    d) git push origin vX.Y.Z
3. deploy to bintray:
    a) gr clean publishBintray
    b) Log in to bintray, navigate to https://bintray.com/loewenfels/oss -> check and publish new jars
4. create release on github

Prepare next dev cycle
-----------------------
1. point to master
   a) search for `tag=vX.Y.Z` and replace it with `branch=master`
   b) search for `tree/vX.Y.Z` and replace it with `tree/master`
2. search for X.Y.Z and change to X.Y+1.Z-SNAPSHOT
3. commit & push changes

*/
